/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JigsawPuzzle;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import org.apache.tomcat.util.codec.binary.Base64;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.core.codec.ByteArrayDecoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import DatabasePackage.DatabaseController;


@Controller
public class IndexController {
    @InitBinder
    protected void initBinder(WebDataBinder binder) throws SQLException {
    }
    
    //global variables of current puzzle/mode
    String mode_;
    String puzzleName_;
    String amountPieces_;
    
    //home index
    @RequestMapping("/")
    public String index() throws IOException, SQLException  {    	
        return "modePick";
    }
    
    //index to select mode and return image select
    @RequestMapping(value = "/modePick", method = RequestMethod.POST)
    public String gameMode(@RequestParam("mode")String mode, Model model) {
    	mode_ = mode;
    	if (mode_.equals("Challenge")) return "challengeSelect";
    	else return "imageSelect";
    }
    
    //index to setup puzzle from variables chosen
    @RequestMapping(value = "/pieceAmount", method = RequestMethod.POST)
    public String puzzleSetup(@RequestParam("amount")String amountPieces, @RequestParam("puzzleName")String puzzleName, Model model) throws IOException {
    	int count = Integer.parseInt(amountPieces);
    	//calculate how many pieces across and down for puzzle
    	int multiples[] = PuzzleController.getMultiple(count);
		int amountWidth = multiples[0];
		int amountHeight = multiples[1];		
		File file = new File("src/main/webapp/img/" + puzzleName + ".jpg");
		BufferedImage temp = ImageIO.read(file);
		int pieceWidth = temp.getWidth()/amountWidth;
		int pieceHeight = temp.getHeight()/amountHeight;
			
    	model.addAttribute("count", count);
    	model.addAttribute("width", amountWidth);
    	model.addAttribute("height", amountHeight);
    	model.addAttribute("puzzleName", puzzleName);
    	model.addAttribute("pieceWidth", pieceWidth);
    	model.addAttribute("pieceHeight", pieceHeight);
    	
    	model.addAttribute("mode", mode_);
    	puzzleName_ = puzzleName;
    	amountPieces_ = amountPieces;
    	
    	
    	return "puzzle";
    }    
    
    //index returning the finish page once jigsaw is complete
    @RequestMapping(value = "/finish", method = RequestMethod.POST)
    public String finish(@RequestParam("time")String time, Model model) throws SQLException {
    	model.addAttribute("time", time);
    	model.addAttribute("mode", mode_);
    	if (mode_.equals("Challenge")) {
    		File newFile = new File("src/main/webapp/img/temp.jpg");
    		newFile.delete();
    	}
    	if(mode_.equals("Timed")) {
    	ArrayList[] returned = DatabaseController.getLeaderboard(puzzleName_ + amountPieces_);
    	
    	model.addAttribute("names", returned[0]);
    	model.addAttribute("times", returned[1]);
    	}
    	return "finish";
    }
    
    //index to deal with user uploaded image
    @RequestMapping(value = "/levelSelect", method = RequestMethod.POST)
    public String levelSelect(@RequestParam("base64")String base64_, @RequestParam("amount")String amountPieces, Model model) throws IOException {
    	
    	//gets byte array from String base64
    	byte[] data = Base64.decodeBase64(base64_.substring(base64_.indexOf(",")));
    	
    	//overwrites file from byte array
    	try(OutputStream stream = new FileOutputStream("src/main/webapp/img/temp.jpg")){
    		stream.write(data);
    	}
    	
    	int count = Integer.parseInt(amountPieces);
    	//calculate how many pieces across and down for puzzle
    	int multiples[] = PuzzleController.getMultiple(count);
		int amountWidth = multiples[0];
		int amountHeight = multiples[1];		
		//creates image from file
		File file = new File("src/main/webapp/img/temp.jpg");
		BufferedImage temp = ImageIO.read(file);
		int pieceWidth = temp.getWidth()/amountWidth;
		int pieceHeight = temp.getHeight()/amountHeight;
    	
		//resizing image uploaded
    	if(temp.getWidth()>800 || temp.getHeight()>500){
    		
    		//deletes original file as we now have it as image
    		file.delete();
    		
    		BufferedImage resizeTemp;
    		
        	int heightBoundary = 500;
        	int widthBoundary = 800;
        	
        	float startingWidth = temp.getWidth();
        	float startingHeight = temp.getHeight();
        	
        	//calculate ratio for resizing 
        	float widthRatio = widthBoundary/startingWidth;
        	float heightRatio = heightBoundary/startingHeight;
        	
        	if (widthRatio<=0 && heightRatio<=0) resizeTemp = temp;
        	else if (widthRatio<=heightRatio) resizeTemp = PuzzleController.resize(temp, (int)(startingWidth*widthRatio), (int)(startingHeight*widthRatio));
        	else resizeTemp = PuzzleController.resize(temp, (int)(startingWidth*heightRatio), (int)(startingHeight*heightRatio));
        	
        	//writes newly sized file as image
    		File newFile = new File("src/main/webapp/img/temp.jpg");
    		ImageIO.write(resizeTemp, "jpg", newFile);			
    		
    		pieceWidth = resizeTemp.getWidth()/amountWidth;
    		pieceHeight = resizeTemp.getHeight()/amountHeight;
    		}
    	
    	model.addAttribute("count", count);
    	model.addAttribute("width", amountWidth);
    	model.addAttribute("height", amountHeight);
    	model.addAttribute("puzzleName", "temp");
    	model.addAttribute("pieceWidth", pieceWidth);
    	model.addAttribute("pieceHeight", pieceHeight);
    	model.addAttribute("mode", mode_);
    	
    	return "puzzle";
    }
    
    //index to return you to homepage after submission of name for leader board
    @RequestMapping(value = "/leaderboard", method = RequestMethod.POST)
    public String leaderboard(@RequestParam("time")String time, @RequestParam("name")String name, Model model) throws SQLException {
    	
    	//adds name and time to leader boards
    	String table = puzzleName_ + amountPieces_;
    	DatabaseController.insertTime(table, name, Integer.parseInt(time));
    	
    	return "redirect:/";
    }
    
}
