/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JigsawPuzzle;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;


@SpringBootTest
@RunWith(SpringJUnit4ClassRunner.class)
@WebMvcTest(IndexController.class)
public class LibraryTest{
   
	@Autowired
	private IndexController indexController;
	
	@Autowired
	private MockMvc mockMvc;
	
	
	@Test
	public void homePageLoadTest() throws Exception {
		mockMvc.perform(get("/"))
		.andExpect(status().isOk());
	}
	
	@Test
	public void modePickTest() throws Exception {
		String gamemode = "Casual";

		
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders
                .get("/modePick");
        request.param("mode", gamemode);

        ResultActions result = mockMvc.perform(request);
        
        result.andExpect(status().isOk());
		
	}
	
	
	
}


/*
import org.hamcrest.Matchers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.hamcrest.Matchers.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.MatcherAssert.*;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import static org.hamcrest.Matchers.*;

import javax.management.relation.RoleResult;

import static org.hamcrest.MatcherAssert.*;

import spock.lang.Shared;
import spock.lang.Specification;
import spock.lang.Unroll;
import JigsawPuzzle.IndexController;
import spock.lang.Specification;

@SpringBootTest
public class LibraryTest extends Specification {
	
	@Autowired
	private IndexController indexController;	
	
	@Autowired
	private WebApplicationContext wac;
	
	private MockMvc mockMvc;
	private ResultActions result;
	

	def setup() {
		this.mockMvc = MockMvcBuilders
						.webAppContextSetup(this.wac)
						.build();
	}
	
	
	
	@Unroll
	def "when a user loads the home page"() {
		
		given:
			result = this.mockMvc.perform(get("/"));
		
		expect:
			result.andExpect(status().isOk());
	}
}*/











